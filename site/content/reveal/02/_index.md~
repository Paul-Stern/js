+++
draft = false
outputs = "Reveal"
+++

## Занятие №2 {#занятие-2}

Строковый и логический типы данных.

Условные операторы

---

Каждый пример, который мы будем рассматривать, можно сразу же исполнять в консоли :computer:.

---


### Строки (strings) {#строки--strings}

```javascript
let text = 'Латынь из моды вышла ныне.';
```

Строки &mdash; это последовательности символов.

Функции на сегодня:

-   `String()`
-   `string.indexOf()`
-   `string.slice()`
-   `string.toLowerCase()`
-   `string.toUpperCase()`

---

Большинство рассматриваемых примеров предназначены для выполнения в консоли, а не для сохранения в файл.

Попробуйте ввести в консоли:

```js
text
// 'Латынь из моды вышла ныне.'
```

---

Попробуйте запустить скрипт, сохранив в него:

```js
let text = 'Латынь из моды вышла ныне.';
text
```

Что получится в результате?

В чем разница между запуском этого кода из консоли и из файла?

---


#### Экранирование символов {#экранирование-символов}

Помимо обычных символов строки в JavaScript могут содержать управляющие конструкции.

Самые распространенные:

-   `\n` &mdash; перенос строки
-   `\t` &mdash; табуляция

---

```js
let table1 = '1 10 100\n' + '10 100 1000\n' + '100 1000 10000';
let table2 = '1\t10\t100\n' + '10\t100\t1000\n' + '100\t1000\t10000';
```

---

{{% section %}}


#### Свойства строк {#свойства-строк}

```js
let text = 'Латынь из моды вышла ныне';
console.log(text.length);
// 25
```

Length - длина. Такой вызов возвращает длину строки. length - свойство переменной text. Любая строка обладает этим свойством.

---

```js
text[n]
```

С помощью этой конструкции можно получать n-ный элемент строки. Нумерация начинается с 0.

```js
console.log(text[0]);
// 'Л'
console.log(text[1]);
// 'а'
console.log(text[7]);
// 'и'
```

---

Строки являются неизменяемым типом данных. Это значит, что невозможно изменить произвольный элемент строки.

```js
text[0] = 'л'
```

Код выше не вызывает ошибок, но и не дает ожидаемого результата:

```js
console.log(text);
// 'Латынь из моды вышла ныне'
```

---

В JavaScript есть &bdquo;строгий режим&rdquo;, который вызывает ошибки в недопустимых конструкциях. Активировать его можно добавив в начало скрипта строчку `'use script'`. Попробуйте этот пример:

```js
'use strict';
let text = "Латынь из моды вышла ныне";
text[0] = "л";
console.log(text);
```

{{% /section %}}

---

```js
text.indexOf()
```

В качестве аргумента эта функция принимает строку для поиска, а выводит начальную позицию этой строки.

```js
text.indexOf('м')
// 10
text.indexOf('ы')
// 3
text.indexOf('ды')
// 12
text[12]
// 'д'
```

---

Функции, перечисленные выше, работают для всех строковых значений. Например:

```js
let letter = 'с';
let word =  'спокойствие';
let sentence = 'Никогда не теряй спокойствие.';

letter.indexOf('с');
// 0
word.indexOf('с');
// 0
sentence.indexOf('с');
// 17
```

---


#### `string.slice(начало [, конец])` {#string-dot-slice--начало-конец}

Функция позволяет копировать часть строки. В качестве аргументов принимает начальный индекс и, опционально, конечный. Возвращает копию фрагмента строки.

---

Схема:

начало (+ конец) фрагмента → `string.slice()` → копия фрагмента строки

```js
text.slice(10, 14)
// 'моды'
text.slice(21)
// 'ныне'
text.slice(-4)
// 'ныне'
text.slice(7)
// 'из моды вышла ныне'
```

---


#### `toUpperCase()` и `toLowerCase()` {#touppercase-и-tolowercase}

```js
let text = 'СтРоКа';
text.toLowerCase() // 'строка'
text.toUpperCase() // 'СТРОКА'
```

---

---


#### Задачи {#задачи}

---

№1

```js
let text = 'nunc aliquet bibendum enim';
```

Вывести копию данной строки без первого слова, используя функции slice()  и indexOf().

---

№2
Используя те же функции, получить и вывести строку

```js
"enim nunc aliquet bibendum enim"
```

---


### Булевы значения {#булевы-значения}

{{% section %}}

&mdash; это значения `true` или `false`. Мы рассмотрим следующие **операторы**, связанные с ними:

---

-   `&&`
-   `||`
-   `!`
-   `==`
-   `!=`
-   `<`
-   `>`
-   `<=`
-   `>=`

{{% /section %}}

---


#### Логические операторы {#логические-операторы}

JavaScript поддерживает 3 логичеких оператора:

-   `&&`
-   `||`
-   `!`

---

{{% section %}}


#### && {#and-and}

`&&` &mdash; это оператор &bdquo;и&rdquo;. Также он называется &bdquo;коньюнкция&rdquo; или логическое умножение.
Он возвращает `true`, если оба предоставленные ему операнда (значения) равны `true`. В остальных случаях &mdash; `false`.

Например:

```js
true && true // true
true && false // false
```

---


#### || {#}

`||` &mdash; это оператор &bdquo;или&rdquo;. Также он называется &bdquo;дизъюнкция&rdquo; или &bdquo;логическое сложение&rdquo;. Этот оператор возвращает `false`, если оба значения равны `false`. В остальных случаях &mdash; `true`.

Например:

```js
false || false // false
false || true // true
```

---


#### ! {#}

`!` &mdash; это оператор &bdquo;не&rdquo;. Также он называется &bdquo;отрицание&rdquo;.

Этот оператор &bdquo;переворачивает&rdquo; данное ему значение.

Например:

```js
!true // false
!false // true
```

{{% /section %}}

---


#### Таблица истинности {#таблица-истинности}

---

Вы знаете, что это?

Умеете ли ее составлять?

---

Составим таблицу истинности для `a && b` и

`a || b`. Будем считать, что `true` &mdash; `1`, а `false` &mdash; `0`.

---

<table>
    <tr>
	<th>a</th>
	<th>b</th>
	<th>a && b</th>
	<th>a || b</th>
    </tr>
    <tr>
	<td>1</td>
	<td>1</td>
	<td>1</td>
	<td>1</td>
    </tr>
    <tr>
	<td>1</td>
	<td>0</td>
	<td>0</td>
	<td>1</td>
    </tr>
    <tr>
	<td>0</td>
	<td>1</td>
	<td>0</td>
	<td>1</td>
    </tr>
    <tr>
	<td>0</td>
	<td>0</td>
	<td>0</td>
	<td>0</td>
    </tr>
</table>

---


#### Задача {#задача}

Заполнить таблицу истинности (можно использовать компьютер):

<table>
  <tr>
    <th>a</th>
    <th>b</th>
    <th>a && b</th>
    <th>a || b</th>
    <th>(a && b) || a</th>
    <th>(a || b) && b</th>
  </tr>
</table>

---

<table>
  <tr>
    <th>a</th>
    <th>b</th>
    <th>c</th>
    <th>(a && b) || c</th>
    <th>(a || b) && c</th>
  </tr>
</table>

---


#### Операторы сравнения {#операторы-сравнения}

`==`, `!=`, `<`, `<=`, `>`, `>=` &mdash; все это операторы сравнения. Они возвращают `true`, если знак выполняется, и `false` в противном случае.

Как вы думаете, что они значат?

---

`==`, `!=`.

Примеры их применения:

```js
(true == true) && (182e-4 == 182e-4) && ('JS' == 'JS');

(true != false) && (Infinity != NaN) && ('Scheme' != 'Python');
```

Что получится в результаты выполнения этого кода?

---

`<`, `>`, `<=`, `>=`

```js
(NaN > 0) || (-Infinity >= 18) || (47e4 < 47e-4)
```

---


### Условный оператор if(если) else(иначе) {#условный-оператор-if--если--else--иначе}

```text
if (bool1) {
  ... code1 ...
} else if (bool2) {
  ... code2 ...
} ...
...
} else {
  ... code else ...
}
```

-   bool &mdash; логические выражения
-   code &mdash; списки инструкций

---

Условный оператор if else также называется оператором ветвления. Он позволяет программе идти по разным &bdquo;веткам&rdquo; кода в зависимости от выполнения условия.

---

Рассмотрим примеры:

---

```js
if(true) {
    console.log(1);
} else if(true) {
    console.log(2);
} else {
    console.log(3);
};
```

---

```js
let number = prompt('Введите целое число от 1 до 10');
if (number < 4) {
    alert('Число меньше 4')
} else if(number <= 7){
    alert('Число больше 3 и меньше 8 ')
} else {
    alert('Число больше 7')
}
```

---


#### Задачи {#задачи}

---

Найти большее из 2 чисел.

---

Из 3.

---

Из 4.

---

5 =).

---

Найти альтернативные решения предыдущих задач с использованием логических операторов (`&&`, `||`, `!`).
