#+HUGO_BASE_DIR: ../site/
#+HUGO_SECTION: ./reveal/01

# #+EXPORT_FILE_NAME: _index.md

#+EXPORT_FILE_NAME: _index
#+HUGO_MENU: :reveal_hugo
#+HUGO_CUSTOM_FRONT_MATTER: :outputs "Reveal" :aliases "/reveal/" 

# :markup "blackfriday"
# [reveal_hugo]

* Программирование на языке JavaScript

---

** Занятие №1
Общие сведения 

---

Какие знания и умения необходимы для овладения программированием?

---

- Математические знания
- Владение навыками алгоритмического мышления
- Владение ИКТ
  - Компьютером
  - Интернетом
- Владение английским языком

---

*** Какими бывают языки программирования?
Языки программирования:
- компилируемые
- интерпретируемые

---
Компилируемые языки:

Исходный код → исполняемый код → исполнение

Среди них:
- C
- C++
- Go
- Rust


---

Интерпретируемые языки:

Исходный код → исполнение (интерпретатором)

Среди них:
- Python
- Bash
- PHP

---

Как вы думаете, к каким относится JavaScript?

---

JavaScript \mdash интерпретируемый язык

---

Короткие программы на интерпретируемых языках называют /скриптами/

---

*** Область применения
{{% section %}}
*** Веб
Браузеры
- Mozilla Firefox
- Google Chrome
- и др.

---

- MongoDB
- LibreOffice
- Node.js
- Electron
  - VSCode
  - Twitch App для Windows
  - Discord
{{% /section %}}

---

*** Эволюция языка
Стандарт ECMAScript (ES)
- ES1 \mdash 1997
- \dots
- ES5 \mdash 2009
- ES6 \mdash 2015 (ES2015)
- ES7 \mdash 2016 (ES2016)
- \dots
- ES2019 (10-й по счету)

---

*** Структура программ
{{% section %}}
значения + операторы → выражения → инструкции
# значения, операторы, ключевые слова => выражения => инструкции
---

Примеры значений:
- ~1~
- ~2.5~
- ~false~
- ~"Строка"~

---

| Выражения                                         | Инструкции                                                                                                                                                 |
| <20>                                              | <20>                                                                                                                                                       |
|---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Выражение \mdash фрагмент кода, возвращающий значение. | Инструкция \mdash фрагмент кода, состоящий из выражений. Инструкции отделяются знаком =;= . Простейший пример инструкции \mdash выражение и ~;~ после него: ~false;~ |

{{% /section %}}

---

*** Типы данных
{{% section %}}
Разновидности значений

---

Булевский или логический

Значений этого типа всего 2:

#+BEGIN_SRC javascript
true
#+END_SRC
и
#+BEGIN_SRC javascript
false
#+END_SRC

---

Численный

Примеры:
#+BEGIN_SRC javascript
22
0.25
#+END_SRC

---

Строковый

#+BEGIN_SRC javascript
'между кавычками'
"может быть"
`любой текст`
#+END_SRC

---

Существуют также такие типы, как object, array и др. Но о них позже.

{{% /section %}}

---

{{% section %}}

*** Численный тип

**** Целые (integer)
#+BEGIN_SRC javascript
8
#+END_SRC

**** Дробные (fractional)
#+BEGIN_SRC javascript
8.5
#+END_SRC

Возможно применений \bdquo{}научной\rdquo записи
#+BEGIN_SRC javascript
8.5e4
// 85000

8.5e-4
// 0.00085
#+END_SRC

---

*** Специальные числа

#+BEGIN_SRC javascript
Infinity   \\ Бесконечность
-Infinity  \\ Минус бесконечность
NaN        \\ Не число (Not a Number)
#+END_SRC


{{% /section %}}

---

*** Операторы чисел
| сложение  | ~+~ |
| вычитание |  ~-~      |
| умножение |  ~*~ |
| деление   |  ~/~ |

---

Как вы думаете, какие еще есть операторы чисел?

---

Время проверить все это в консоли :computer: !

Нажмите =F12= 

---

*** Особенности работы с числами
Точность вычислений ограничена.

Рассмотрим примеры в консоли :computer: .

---

*** Переменные (variables)
Создаются с помощью ключевого слова ~let~.
#+BEGIN_SRC javascript
let x = 1;
let a = 12;
let b = a + 6;
#+END_SRC

~let~ \mdash ES2015. Ранее \mdash ~var~.

---

*** Особенности ~let~
Попробуйте повторно использовать =x=.
#+BEGIN_SRC javascript
let x = 145
// Uncaught SyntaxError: Identifier 'x' has already been declared
//    at <anonymous>:1:1
#+END_SRC

---

*** Функции
Вызываются в форме =имяФункции(аргумент(ы))=.

Аргумент \mdash это то, что посылается на /вход/ функции.
Функция /возвращает/ значение на /выходе/.

аргумент → функция → возвращенное значение

---

Список функций на сегодня:
#+BEGIN_SRC javascript
console.log()
typeof()
prompt()
alert()
#+END_SRC

---

*** ~console.log()~
Выводит в консоль аргумент(ы).

---

*** ~typeof()~
Возвращает тип значения аргумента

---

*** ~prompt()~
Возвращает строку, введенную пользователем в специальное окно

Первый аргумент \mdash строка-сообщение для пользователя.

---

*** ~alert()~
Выводит аргумент в качестве сообщения для пользователя

---

*** Строки
Пример конкатенации (сложения) строк:
#+BEGIN_SRC javascript
let s = 'День ';
console.log('Наступил ' + s + 'знаний.');
#+END_SRC
Альтернативный способ. Найдите отличия:
#+BEGIN_SRC javascript
console.log('Наступил ', s, 'знаний.');
#+END_SRC
Есть ли разница в результате?

---

*** =''= vs. =""= vs. =``=
#+BEGIN_SRC javascript
let n = 3;
#+END_SRC
Есть ли разница между:
#+BEGIN_SRC javascript
console.log('Произведение n и 7 = ', n*7)
console.log("Произведение n и 7 = ", n*7)
console.log(`Произведение n и 7 = ${n*7} `)
#+END_SRC

---

*** Автоматическое преобразование типов
#+BEGIN_SRC javascript
8 * null
// 0
'5' - 1
// 4
"5" + 1
// 51
"пять" * 2
// NaN
#+END_SRC

---

*** Хранение программ на ПЗУ

Запуск программ:
- напрямую из консоли
- из HTML-файла

---

Сохранение программ в файле позволяет запускать их произвольное количество раз, без необходимости их переписывать заново.

---

*** TODO COMMENT Должно работать но не работает

# {{% slide content="slides.making_exercise_done" %}}

# {{% slide content="slides.exercises" %}}

# #+INCLUDE:"partials/exercises.org"

---

*** Решение задач

1. Математическое решение
2. Решение на языке программирования
   1. Ввод данных, в том числе создание переменных
   2. Вычисление значений
   3. Вывод данных

---

*** Задачи

---

№1

Найти и вывести площадь прямоугольника при заданных пользователем ширине и высоте.

---

№2

Найти и вывести  пройденный путь при заданных пользователем скорости и времени.

---

№3

Найти и вывести процент отличников при заданном пользователем их количестве и общем числе учеников.

---

№4

В мешке в 1,5 раза больше сахара, чем в коробке, и в 12,5 раза больше, чем в банке. Сколько сахара в коробке и сколько в банке, если в мешке 37,5 кг сахара.

---

Предложите свою задачу. Решите сами и дайте решить другим. Проверьте их решение.

