#+HUGO_BASE_DIR: ../site/
#+HUGO_SECTION: ./reveal/02
#+EXPORT_FILE_NAME: _index.md
#+HUGO_MENU: :reveal_hugo
#+HUGO_CUSTOM_FRONT_MATTER: :outputs "Reveal"

* Занятие №2
Строковый и логический типы данных. 

Условные операторы

--- 

Каждый пример, который мы будем рассматривать, можно сразу же исполнять в консоли :computer:.

---

** Строки (strings)

#+BEGIN_SRC javascript
let text = 'Латынь из моды вышла ныне.';
#+END_SRC

Строки \mdash это последовательности символов.

Функции на сегодня:
- ~String()~
- ~string.indexOf()~
- ~string.slice()~
- ~string.toLowerCase()~
- ~string.toUpperCase()~

---

Большинство рассматриваемых примеров предназначены для выполнения в консоли, а не для сохранения в файл.

Попробуйте ввести в консоли:
#+BEGIN_SRC js
  text
  // 'Латынь из моды вышла ныне.'
#+END_SRC

---

Попробуйте запустить скрипт, сохранив в него:

#+BEGIN_SRC js
  let text = 'Латынь из моды вышла ныне.';
  text
#+END_SRC

Что получится в результате? 

В чем разница между запуском этого кода из консоли и из файла?

---


*** Экранирование символов
Помимо обычных символов строки в JavaScript могут содержать управляющие конструкции. 

Самые распространенные:
- ~\n~ \mdash перенос строки
- ~\t~ \mdash табуляция

---

#+BEGIN_SRC js
let table1 = '1 10 100\n' + '10 100 1000\n' + '100 1000 10000';
let table2 = '1\t10\t100\n' + '10\t100\t1000\n' + '100\t1000\t10000';
#+END_SRC

#+BEGIN_COMMENT

#+BEGIN_SRC js
let table3 = '';
for (let y = 1; y < 1e5; y *= 10) {
	  for (let x = 1; x < 1e4; x *= 10) {
	      table3 += `${x * y}\t`;
	  }
	  table3 += '\n'
}
#+END_SRC

#+END_COMMENT

---

{{% section %}}

*** Свойства строк
#+BEGIN_SRC js
let text = 'Латынь из моды вышла ныне';
console.log(text.length);
// 25
#+END_SRC

Length - длина. Такой вызов возвращает длину строки. length - свойство переменной text. Любая строка обладает этим свойством. 

---

#+BEGIN_SRC js
text[n]
#+END_SRC

С помощью этой конструкции можно получать n-ный элемент строки. Нумерация начинается с 0.

#+BEGIN_SRC js
  console.log(text[0]);
  // 'Л'
  console.log(text[1]);
  // 'а'
  console.log(text[7]);
  // 'и'
#+END_SRC

---

Строки являются неизменяемым типом данных. Это значит, что невозможно изменить произвольный элемент строки. 

#+BEGIN_SRC js
  text[0] = 'л'
#+END_SRC

Код выше не вызывает ошибок, но и не дает ожидаемого результата:

#+BEGIN_SRC js
  console.log(text);
  // 'Латынь из моды вышла ныне'
#+END_SRC

---

В JavaScript есть \bdquo{}строгий режим\rdquo, который вызывает ошибки в недопустимых конструкциях. Активировать его можно добавив в начало скрипта строчку ~'use script'~. Попробуйте этот пример:

#+BEGIN_SRC js
  'use strict';
  let text = "Латынь из моды вышла ныне";
  text[0] = "л";
  console.log(text);
#+END_SRC

{{% /section %}}

---

#+BEGIN_SRC js
  text.indexOf()
#+END_SRC

В качестве аргумента эта функция принимает строку для поиска, а выводит начальную позицию этой строки.

#+BEGIN_SRC js
  text.indexOf('м')
  // 10
  text.indexOf('ы')
  // 3
  text.indexOf('ды')
  // 12
  text[12]
  // 'д'
#+END_SRC

---

Функции, перечисленные выше, работают для всех строковых значений. Например:

#+BEGIN_SRC js
  let letter = 'с';
  let word =  'спокойствие';
  let sentence = 'Никогда не теряй спокойствие.';

  letter.indexOf('с');
  // 0
  word.indexOf('с');
  // 0
  sentence.indexOf('с');
  // 17
#+END_SRC

---

*** ~string.slice(начало [, конец])~
Функция позволяет копировать часть строки. В качестве аргументов принимает начальный индекс и, опционально, конечный. Возвращает копию фрагмента строки.

---

Схема:

начало (+ конец) фрагмента → ~string.slice()~ → копия фрагмента строки


#+BEGIN_SRC js
  text.slice(10, 14)
  // 'моды'
  text.slice(21)
  // 'ныне'
  text.slice(-4)
  // 'ныне'
  text.slice(7)
  // 'из моды вышла ныне'
#+END_SRC

---

*** ~toUpperCase()~ и ~toLowerCase()~

#+BEGIN_SRC js
  let text = 'СтРоКа';
  text.toLowerCase() // 'строка'
  text.toUpperCase() // 'СТРОКА'
#+END_SRC

---


---

*** Задачи
№1
#+BEGIN_SRC js
  let text = 'nunc aliquet bibendum enim';
#+END_SRC

Вывести копию данной строки без первого слова, используя функции slice()  и indexOf().
---

Используя те же функции, получить и вывести строку
#+BEGIN_SRC js
"enim nunc aliquet bibendum enim"
#+END_SRC

** Булевы значения

{{% section %}}

\mdash это значения ~true~ или ~false~. Мы рассмотрим следующие операторы, связанные с ними:

---

- ~&&~
- ~||~
- ~!~
- ~==~
- ~!=~
- ~<~
- ~>~
- ~<=~
- ~>=~

{{% /section %}}

---

*** Логические операторы
JavaScript поддерживает 3 логичеких оператора: 
- ~&&~
- ~||~
- ~!~

---

{{% section %}}

*** &&
~&&~ \mdash это оператор \bdquo{}и\rdquo. Также он называется \bdquo{}коньюнкция\rdquo или логическое умножение.
Он возвращает ~true~, если оба предоставленные ему операнда (значения) равны ~true~. В остальных случаях \mdash ~false~.

Например:
#+BEGIN_SRC js
true && true // true
true && false // false
#+END_SRC

---

*** ||
~||~ \mdash это оператор \bdquo{}или\rdquo. Также он называется \bdquo{}дизъюнкция\rdquo или \bdquo{}логическое сложение\rdquo. Этот оператор возвращает ~false~, если оба значения равны ~false~. В остальных случаях \mdash ~true~.

Например:
#+BEGIN_SRC js
  false || false // false
  false || true // true
#+END_SRC

---

*** !
~!~ \mdash это оператор \bdquo{}не\rdquo. Также он называется \bdquo{}отрицание\rdquo.

Этот оператор \bdquo{}переворачивает\rdquo данное ему значение.

Например:
#+BEGIN_SRC js
  !true // false
  !false // true
#+END_SRC

{{% /section %}}

---

*** Таблица истинности

---

Вы знаете, что это?

Умеете ли ее составлять?

---

Составим таблицу истинности для ~a && b~ и 

~a || b~. Будем считать, что ~true~ \mdash ~1~, а ~false~ \mdash ~0~.

---

#+BEGIN_EXPORT html
<table>
    <tr>
	<th>a</th>
	<th>b</th>
	<th>a && b</th>
	<th>a || b</th>
    </tr>
    <tr>
	<td>1</td>
	<td>1</td>
	<td>1</td>
	<td>1</td>
    </tr>
    <tr>
	<td>1</td>
	<td>0</td>
	<td>0</td>
	<td>1</td>
    </tr>
    <tr>
	<td>0</td>
	<td>1</td>
	<td>0</td>
	<td>1</td>
    </tr>
    <tr>
	<td>0</td>
	<td>0</td>
	<td>0</td>
	<td>0</td>
    </tr>
</table>
#+END_EXPORT

---

*** Задача
Заполнить таблицу истинности (можно использовать компьютер):

#+BEGIN_EXPORT html
<table>
  <tr>
    <th>a</th>
    <th>b</th>
    <th>a && b</th>
    <th>a || b</th>
    <th>(a && b) || a</th>
    <th>(a || b) && b</th>
  </tr>
</table>
#+END_EXPORT

---

*** Операторы сравнения
~==~, ~!=~, ~<~, ~<=~, ~>~, ~>=~ \mdash все это операторы сравнения. Они возвращают ~true~, если знак выполняется, и ~false~ в противном случае.

Как вы думаете, что они значат?

---

~==~, ~!=~.

Примеры их применения:
#+BEGIN_SRC js
  (true == true) && (182e-4 == 182e-4) && ('JS' == 'JS');

  (true != false) && (Infinity != NaN) && ('Scheme' != 'Python');
#+END_SRC

Что получится в результаты выполнения этого кода?

---

~<~, ~>~, ~<=~, ~>=~

#+BEGIN_SRC js
  (NaN > 0) || (-Infinity >= 18) || (47e4 < 47e-4)
#+END_SRC

---

*** Условный оператор if(если) else(иначе)
#+BEGIN_EXAMPLE
if (bool1) {
  ... code1 ...
} else if (bool2) {
  ... code2 ...
} ...
...
} else {
  ... code else ...
}
#+END_EXAMPLE

---

Условный оператор if else также называется оператором ветвления. Он позволяет программе идти по разным \bdquo{}веткам\rdquo кода в зависимости от выполнения условия. 

---

Рассмотрим примеры:

---

#+BEGIN_SRC js
    if(true) {
	console.log(1);
    } else if(true) {
	console.log(2);
    } else {
	console.log(3);
    };
#+END_SRC

---

#+BEGiN_SRC js
    let number = prompt('Введите целое число от 1 до 10');
    if (number < 4) {
	alert('Число меньше 4')
    } else if(number <= 7){
	alert('Число больше 3 и меньше 8 ')
    } else {
	alert('Число больше 7')
    }
#+END_SRC

---

*** Задачи

---

Найти большее из 2 чисел.

---

Из 3.

---

Из 4.

---

5 =).
